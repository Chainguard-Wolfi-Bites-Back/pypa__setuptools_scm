from __future__ import annotations

import os.path

from .. import _types as _t
from .._version_cls import _version_as_tuple
from ..version import ScmVersion

TEMPLATES = {
    ".py": """\
# file generated by setuptools_scm
# don't change, don't track in version control
__version__ = version = {version!r}
__version_tuple__ = version_tuple = {version_tuple!r}
""",
    ".txt": "{version}",
}


def dump_version(
    root: _t.PathT,
    version: str,
    write_to: _t.PathT,
    template: str | None = None,
    scm_version: ScmVersion | None = None,
) -> None:
    assert isinstance(version, str)
    target = os.path.normpath(os.path.join(root, write_to))
    ext = os.path.splitext(target)[1]
    template = template or TEMPLATES.get(ext)
    from .._log import log

    log.debug("dump %s into %s", version, write_to)
    if template is None:
        raise ValueError(
            "bad file format: '{}' (of {}) \nonly *.txt and *.py are supported".format(
                os.path.splitext(target)[1], target
            )
        )
    version_tuple = _version_as_tuple(version)

    if scm_version is not None:
        with open(target, "w") as fp:
            fp.write(
                template.format(
                    version=version,
                    version_tuple=version_tuple,
                    scm_version=scm_version,
                )
            )
    else:
        with open(target, "w") as fp:
            fp.write(template.format(version=version, version_tuple=version_tuple))
