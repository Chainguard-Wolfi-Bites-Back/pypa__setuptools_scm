from __future__ import annotations

from pathlib import Path

from .. import _types as _t
from .._version_cls import _version_as_tuple
from ..version import ScmVersion

TEMPLATES = {
    ".py": """\
# file generated by setuptools_scm
# don't change, don't track in version control
__version__ = version = {version!r}
__version_tuple__ = version_tuple = {version_tuple!r}
""",
    ".txt": "{version}",
}


def dump_version(
    root: _t.PathT,
    version: str,
    write_to: _t.PathT,
    template: str | None = None,
    scm_version: ScmVersion | None = None,
) -> None:
    assert isinstance(version, str)
    target = Path(root).joinpath(write_to)
    template = template or TEMPLATES.get(target.suffix)
    from .._log import log

    log.debug("dump %s into %s", version, write_to)
    if template is None:
        raise ValueError(
            f"bad file format: {target.suffix!r} (of {target})\n"
            "only *.txt and *.py have a default template"
        )
    version_tuple = _version_as_tuple(version)

    if scm_version is not None:
        content = template.format(
            version=version,
            version_tuple=version_tuple,
            scm_version=scm_version,
        )

    else:
        content = template.format(version=version, version_tuple=version_tuple)

    with open(target, "w", encoding="utf-8") as fp:
        fp.write(content)
